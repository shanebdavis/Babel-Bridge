2010-12-24 Left-Recursion
----------

http://en.wikipedia.org/wiki/Parsing_expression_grammar
Left-Recursion: Given what wikipedia says about left-recursion, I don't want to "support it" at the expense of losing linear-time parsing. I think the right answer is to "handle it nicely":

* detect when we attempt to match a rule-variant that is alreadying being matched at the same caracter position further up the stack.
* When we detect such a situation, immediately fail to match - as attempting to match leads to infinite recursion.
* This changes parser behavior in that it will not cause an error. Instead, the parser will proceed to attempt to match other variants.

2010-12-13
----------

I want the ability to add methods to the base-class for all Nodes on a per-parser basis.

This means that each parser needs to define a new node base-class, derived from BabelBridge::Node, from
which all the Rule Nodes derive.

2010-12-12
----------

Right now an Optional node that is not matched returns an instance of EmptyNode. However, in the parsed result, ideally that match-slot would have the value "nil". How can we accomplish that simply?


2010-12-03
----------

TODO: allow arbitrary nesting of anonymous patterns
TODO: add OR anonymous pattern

2010-11-*
---------
TODO-FEATURE: :pre_delimiter option for many()
TODO-FEATURE: The "expecting" feature is so good I wonder if we should add the ability to make and apply suggestions to "repair the parse".
  This would need:
    a) default values for regex terminals
      . string terminals are their own default values
      . default values for regex should be verified to match the regex
    b) an interactive prompter if there is more than one option

TODO-IMPROVEMENT: "Expecting" should show line numbers instead of char numbers, but it should only be calculated on demand. This means we need a smarter formatter for our possible-error-logging.

TODO-BUG: "Expecting" doesn't do the right thing if a "dont" clause matched
  Should say "something other than #{the don't clause}"
  Ideally, we would continue matching and list all the possible next clauses that would allow us to continue

IDEA: could use the "-" prefix operator to mean "dont":
  -"this"
  -:that
  -match(:foo)
  -many(:foo)