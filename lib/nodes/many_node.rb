=begin
Copyright 2011 Shane Brinkman-Davis
See README for licence information.
http://babel-bridge.rubyforge.org/
=end

module BabelBridge
# generated by a :poly PatternElement
# Not subclassed
class ManyNode < NonTerminalNode
  MATCH_INSPECT_BULLET = "+ "
  DELIMITER_INSPECT_BULLET = "- "

  def delimiter_matches
    @delimiter_matches||=[]
  end

  def separate_delimiter_matches
    count = 0
    @matches, @delimiter_matches = matches.partition {|el| count+=1;(count%2==1)}
    @delimiter_matches = @delimiter_matches[0..@matches.length-2] #delimiter_matches should be exactly 1 shorter
    update_match_length
  end

  def inspect(options={})
    simple = options[:simple]
    verbose = options[:verbose]

    case matches.length
    when 0
      verbose ? "[]" : nil
    when 1
      first = matches.first.inspect options
      verbose ? "[#{first}]" : first
    else
      list = if options[:verbose]
        matches.zip(delimiter_matches).collect do |a,b|
          match = a.inspect options
          delimiter = b && b.inspect(options)
          [MATCH_INSPECT_BULLET + match, delimiter && (DELIMITER_INSPECT_BULLET + delimiter)]
        end
      else
        matches.collect {|a| MATCH_INSPECT_BULLET + a.inspect(options)}
      end.flatten.compact.collect {|a| Tools.indent(a,"  ","   ")}
      (verbose ? ["[",list,"]"] : ["",list]).flatten.join("\n")
    end
  end

  def method_missing(method_name, *args)  #method_name is a symbol
    self.map {|match| match.send(method_name,*args)}
  end

end
end
