2012-1-6 v0.5.0

  Nodes now have #line and #column methods which return the line and column of the source for the start of that Node's match.

2012-1-5 v0.5.0

  Completely reworked ignore_whitespace - again.

  Now there is a global "delimiter" pattern which is matched between every sub-pattern of every rule AND at the begining and end of the entire parse.

  ignore_whitespace sets this delimiter to: /\s*/

  You can set your own delimiter with the delimiter method:

  class MyParser < BabelBridge::Parser
    delimiter :hi, "there", "/[mM]ust/", "be between every sub-pattern!" # delimiter can take any pattern "rule" can
    rule :hi, "hi"
  end

  You can override the delimiter pattern for a single rule to put in special code:

  class MyParser < BabelBridge::Parser
    ignore_whitespace

    rule :root, many(:statement, ';')
    rule :statement, many(:word, / +/), :delimiter => //  # disable the global delimiter
  end

  INCOMPATIBLE CHANGE: node.matches is no longer positional

  node.matches now includes only things that were matched. This means conditional matches which do not match no longer add an EmptyNode to node.matches.

  node.matches now contains all delimiter matches.

  INCOMPATIBLE CHANGE: no more ManyNode

  The many(rule) parser pattern no longer generates a special kind of parse-tree node. Instead it adds all its matches to the parent rule's .matches list. It also adds all the many-delimiters.

  NOTE: 'delimiter' referes to the global delimiter pattern or the rule-local override. 'many-delimiter' refers to the optional, explicit delimiter specfied for the many-pattern.

  NOTE: many(:rule,:many_delimiter) will effectively match: [rule]([delimiter][many_delimiter][delimiter][rule])*

2012-12-31 v0.4.2

    Bugfix: parser_failure_info now works when nothing is matched

2012-12-17 v0.4.1

    rewind_whitespace usage example:

      rule :end_statement, rewind_whitespace, /([\t ]*[\n;])+/

    In this example, end_statement is similar to the end-of-statement pattern for the ruby language. Each statement either ends with a new line or a semicolon. "rewind_whitspace" indicates the parser should back up to the end of the last match and then continue matching.

2012-11-20 v0.4.0

    INCOMPATIBLE CHANGE: Removed the post-match pattern option from the "many" pattern matcher. It simplifies things and can easily be reproduced with a custom rule.

    Did significant code cleanup. NonTerminalNode was renamed RuleNode and a new NonTerminalNode class was created as a parent for RuleNode and ManyNode.

    ignore_whitespace is now just a regexp. An Empty regexp is used if ignore_whitespace is not specified. It is now handled consistenly throughout. Every node has postwhitespace_range and prewhitespace_range methods that allow you to find the whitespace after and before that node.

    node.to_s and node.text now both just return the matched text WITHOUT the preceding and trailing whitespace. Note, however, that it will still include any whitespace inbetween as it is just a single slice out of the source.

2012-11-13

    ignore_whitespace now optionally takes a regexp for what to ignore after every TerminalNode. Default: /\s*/

    rewind_whitespace matching pattern added. This allows you to match the string ignored by "ignore_whitespace" after the previous token.

    Example: Implements the Ruby ";" / new-line parsing rule.

      class MyParser < BabelBridge::Parser
        ignore_whitespace

        rule :pair, :statement, :end_statement, :statement
        rule :end_statement, rewind_whitespace(/([\t ]*[\n;])+/)
        rule :statement, "0"
      end

      # matches two 0s separated by one or more ";" or "\n" and any whitespace


2012-09-28

    Added to_sym on nodes.

2012-09-19 version 0.3.1

    Added refinements to the parser-failure output.

2012-09-13

    Reversed the precedence order for binary_operators_rule. The first element has the highest precedence, i.e., it is computed first.

    Now, the correct precedence order for the basic operators is:

        [["*", "/"], ["+", "-"]]

2012-09-12

    using readline for shell

    added support for infix binary operator presedence resolution:

        USAGE:

              binary_operators_rule :any_rule_name, :operands_pattern, operators, [:right_operators => [...]]

            Where "operators" is an array of operators, ordered by precedence such as: ["+", "-", "*", "/"].

            The last operators in the array are matched first.

            You can also group operators into the same precedence level: [["+", "-"], ["*", "/"]]

            Operators in the same precedence level are matched left-to-right.

            You optionally can list one or more "right_operators" - which can be strings or regexps - to specify which operators are right-associative.

        MATCHING:

              binary_operators_rule :any_rule_name, :operands_pattern, ["+", "-", "*", "/"]

            matches the same string as:

              rule :any_rule_name, many(:operands_pattern,/[-+*\/]/)

        PARSE TREE:

            The resulting parse-tree consists of 1 or more instances of the :any_rule_name rule's varient class. Each node has methods for easy acess to:

                left -> the left operand node
                right -> the right operand node
                operator -> the operator as a symbol
                operator_node -> the operator node

    ignore_whitespace feature added

        Called in the parser's class. Sets a flag that causes all future parsing to ignore white spaces. Specifically, this means that after each terminal-node match, all trailing-whitespace is consumed before the next terminal match is attempted.

        This means that terminal nodes can still match any white-spaces they require.

        The exact matched string, including trailing whitespace, is still available via the "text" method. The "to_s" method, though, now returns the stripped token value (if ignore_whitespace is enabled).

2012-09-09

    forward_to now scans all patern elements for the first one that responds to the method
    added shell
